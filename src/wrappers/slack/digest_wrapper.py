"""
Digest Tool Wrappers for FastMCP Registration
"""
from typing import Optional
from src.tools.slack.digest_tool import DigestGeneratorTool
from src.utils.logger import get_logger

logger = get_logger(__name__)

# Initialize tool instance
digest_tool = DigestGeneratorTool()


async def generate_digest(date: Optional[str] = None) -> str:
    """
    Generate team digest from Slack conversations
    
    Collects team-related messages, generates LLM analysis prompt,
    and returns structured prompt for digest generation.
    
    Args:
        date: Target date in YYYYMMDD format (optional, defaults to today)
            Example: "20251020" for October 20, 2025
    
    Returns:
        LLM prompt for digest generation or error message
    
    Usage:
        # Generate digest for today (default)
        result = await generate_digest()
        
        # Generate digest for specific date
        result = await generate_digest(date="20251019")
    
    Process:
        1. Calculates date range based on input
        2. Searches Slack for team-related messages:
           - Team mentions
           - Individual user mentions and messages
           - Keyword searches
        3. Filters out:
           - Direct messages
           - Excluded channels
           - Morning meeting notes
        4. Deduplicates messages
        5. Formats messages for LLM analysis
        6. Generates comprehensive analysis prompt
        7. Returns prompt for LLM to process
    
    Note:
        After receiving the prompt, the LLM should:
        1. Analyze the messages
        2. Generate structured JSON response
        3. Call post_digest with the JSON
    """
    try:
        logger.info(f"Generating digest for date: {date or 'today'}")
        result = await digest_tool.generate_digest(date)
        return result
    except Exception as e:
        logger.error(f"Failed to generate digest: {e}")
        return f"❌ Failed to generate digest: {e}"


async def post_digest(digest_json: str) -> str:
    """
    Parse digest JSON and post to Slack
    
    Takes the JSON generated by LLM analysis, formats it for Slack,
    and posts to the configured digest channel.
    
    Args:
        digest_json: JSON string from LLM analysis with structure:
            {
                "date": "YYYY-MM-DD",
                "majorTopics": [...],
                "completedItems": [...],
                "risksAndIssues": [...],
                "actionItems": [...],
                "maintenanceNotifications": [...]
            }
    
    Returns:
        Success message with post details or error message
    
    Usage:
        # After LLM generates JSON
        json_result = '''
        {
            "date": "2025-10-20",
            "majorTopics": [
                {
                    "priority": "HIGH",
                    "title": "API Development Progress",
                    "assignees": ["@acn-user1"],
                    "details": ["Implementation completed"],
                    "threadLinks": ["https://..."]
                }
            ],
            ...
        }
        '''
        result = await post_digest(digest_json=json_result)
    
    Process:
        1. Parses JSON string
        2. Validates structure
        3. Formats to Slack message format
        4. Converts @acn- mentions to Slack format
        5. Posts to configured channel (DIGEST_TARGET_CHANNEL)
        6. Returns success/error message
    
    Note:
        - Requires valid JSON structure
        - Bot must be in target channel
        - Uses configured bot username and icon
        - Digest language matches the input message language automatically
    """
    try:
        logger.info("Posting digest to Slack")
        result = await digest_tool.post_digest(digest_json)
        return result
    except Exception as e:
        logger.error(f"Failed to post digest: {e}")
        return f"❌ Failed to post digest: {e}"
